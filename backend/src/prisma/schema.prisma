// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["Profile", "Currency", "Trade"]
}

//#region Profile
model Client {
  id        String   @unique @default(uuid()) @db.Uuid
  name      String   @db.VarChar(32)
  email     String   @unique @db.VarChar(254)
  password  String
  createdAt DateTime @default(now())
  Order     Order?

  @@id(id)
  @@map("Client")
  @@schema("Profile")
}

model AccountManager {
  id        String   @unique @default(uuid()) @db.Uuid
  name      String   @db.VarChar(32)
  email     String   @unique @db.VarChar(254)
  password  String
  createdAt DateTime @default(now())

  @@id(id)
  @@map("AccountManager")
  @@schema("Profile")
}

//#endregion Profile

//#region Currency
model TradingPair {
  id                 String  @unique @default(uuid()) @db.Uuid
  symbol             String  @unique
  baseAsset          String
  quoteAsset         String
  baseAssetPrecision Int
  quotePrecision     Int
  Order              Order[]

  @@id(id)
  // Combination of baseAsset and quoteAsset must be unique
  @@unique([baseAsset, quoteAsset])
  @@map("TradingPair")
  @@schema("Currency")
}

//#endregion Currency

//#region Trade
enum OrderType {
  BUY
  SELL

  @@schema("Trade")
}

enum OrderStatus {
  PLACED
  MATCHED
  FILLED
  EXPIRED
  CANCELED

  @@schema("Trade")
}

model Order {
  id             String       @unique @default(uuid()) @db.Uuid
  price          Float
  quantity       Float
  expireAt       DateTime
  type           OrderType
  status         OrderStatus
  clientId       String       @unique
  createdAt      DateTime     @default(now())
  tradingPairId  String       @db.Uuid
  client         Client       @relation(fields: [clientId], references: [id])
  tradingPair    TradingPair  @relation(fields: [tradingPairId], references: [id], onDelete: NoAction)
  buyTradeMatch  TradeMatch[]
  sellTradeMatch TradeMatch[]
  TradeMatch     TradeMatch[]
  TradeMatch     TradeMatch[]

  @@id(id)
  @@map("Order")
  @@schema("Trade")
}

model TradeMatch {
  id          String @unique @default(uuid()) @db.Uuid()
  buyOrderId  String
  sellOrderId String

  buyOrder  Order   @relation("BuyOrder", fields: [buyOrderId], references: [id])
  sellOrder Order   @relation("SellOrder", fields: [sellOrderId], references: [id])
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String? @db.Uuid

  @@id(id)
  @@map("TradeMatch")
  @@schema("Trade")
}

//#endregion Trade
