// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["User", "Currency", "Trade"]
}

//#region User
model Client {
  id        String   @unique @default(uuid()) @db.Uuid
  name      String   @db.VarChar(32)
  email     String   @unique @db.VarChar(254)
  password  String
  createdAt DateTime @default(now())
  Order     Order[]

  @@id(id)
  @@map("Client")
  @@schema("User")
}

model AccountManager {
  id           String         @unique @default(uuid()) @db.Uuid
  name         String         @db.VarChar(32)
  email        String         @unique @db.VarChar(254)
  password     String
  createdAt    DateTime       @default(now())
  MatchedTrade MatchedTrade[] @relation("AccountManager")

  @@id(id)
  @@map("AccountManager")
  @@schema("User")
}

//#endregion User

//#region Currency
model TradingPair {
  id                  String  @unique @default(uuid()) @db.Uuid
  symbol              String  @unique
  price               Decimal @db.Decimal(18, 8)
  minPrice            Decimal @db.Decimal(18, 8)
  maxPrice            Decimal @db.Decimal(18, 8)
  minQty              Decimal @db.Decimal(18, 8)
  maxQty              Decimal @db.Decimal(18, 8)
  baseAsset           String
  quoteAsset          String
  baseAssetPrecision  Int
  quoteAssetPrecision Int
  Order               Order[]

  @@id(id)
  // Combination of baseAsset and quoteAsset must be unique
  @@unique([baseAsset, quoteAsset])
  @@map("TradingPair")
  @@schema("Currency")
}

//#endregion Currency

//#region Trade
enum OrderType {
  BUY
  SELL

  @@schema("Trade")
}

enum OrderStatus {
  PENDING
  COMPLETED
  REJECTED
  EXPIRED
  CANCELED

  @@schema("Trade")
}

model Order {
  id            String      @unique @default(uuid()) @db.Uuid
  price         Decimal     @db.Decimal(18, 8)
  quantity      Decimal     @db.Decimal(18, 8)
  expiration    DateTime // Expiration date/time or duration
  type          OrderType // Type of order: Buy/Sell
  status        OrderStatus @default(PENDING)
  clientId      String      @db.Uuid
  createdAt     DateTime    @default(now())
  updateAt      DateTime    @updatedAt
  tradingPairId String      @db.Uuid

  tradingPair    TradingPair    @relation(fields: [tradingPairId], references: [id], onDelete: NoAction)
  buyTradeMatch  MatchedTrade[] @relation("BuyOrder")
  sellTradeMatch MatchedTrade[] @relation("SellOrder")

  client Client @relation(fields: [clientId], references: [id])

  @@id(id)
  @@map("Order")
  @@schema("Trade")
}

model MatchedTrade {
  id               String   @unique @default(uuid()) @db.Uuid()
  buyOrderId       String   @db.Uuid
  sellOrderId      String   @db.Uuid
  price            Float // Actual Price at which the orders were matched
  quantity         Float // Actual Quantity matched
  matchedAt        DateTime
  accountManagerId String   @db.Uuid

  buyOrder       Order          @relation("BuyOrder", fields: [buyOrderId], references: [id])
  sellOrder      Order          @relation("SellOrder", fields: [sellOrderId], references: [id])
  accountManager AccountManager @relation("AccountManager", fields: [accountManagerId], references: [id])

  @@id(id)
  @@map("MatchedTrade")
  @@schema("Trade")
}

//#endregion Trade
